name: CI
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Debug - Repository structure
        run: |
          echo "=== Current working directory ==="
          pwd
          echo ""
          echo "=== Repository root contents ==="
          ls -la
          echo ""
          echo "=== Backend directory ==="
          if [ -d "backend" ]; then
            ls -la backend/
            echo ""
            echo "=== Backend app directory ==="
            if [ -d "backend/app" ]; then
              ls -la backend/app/
            else
              echo "backend/app directory not found"
            fi
            echo ""
            echo "=== Backend tests directory ==="
            if [ -d "backend/tests" ]; then
              ls -la backend/tests/
            else
              echo "backend/tests directory not found"
            fi
          else
            echo "backend directory not found"
          fi
          echo ""
          echo "=== Python files ==="
          find . -name "*.py" -type f | head -20
          
      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y postgresql-client libpq-dev
          
      - name: Check and install Python dependencies
        run: |
          echo "=== Python and pip versions ==="
          python --version
          pip --version
          echo ""
          
          echo "=== Upgrading pip ==="
          python -m pip install --upgrade pip setuptools wheel
          echo ""
          
          echo "=== Checking requirements files ==="
          if [ -f "backend/requirements.txt" ]; then
            echo "✓ Found backend/requirements.txt"
            cat backend/requirements.txt
            echo ""
            echo "Installing backend requirements..."
            pip install -r backend/requirements.txt
          else
            echo "❌ backend/requirements.txt not found"
            exit 1
          fi
          
          if [ -f "requirements-dev.txt" ]; then
            echo "✓ Found requirements-dev.txt"
            cat requirements-dev.txt
            echo ""
            echo "Installing dev requirements..."
            pip install -r requirements-dev.txt
          else
            echo "❌ requirements-dev.txt not found"
            exit 1
          fi
          
          echo ""
          echo "=== Installed packages ==="
          pip list | grep -E "(fastapi|sqlmodel|pytest|bandit|safety)"
          
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql+psycopg2://postgres:postgres@localhost:5432/postgres" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci-$(date +%s)" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=fake-google-client-id-for-testing" >> $GITHUB_ENV
          echo "AZURE_CLIENT_ID=fake-azure-client-id-for-testing" >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=fake-azure-client-secret-for-testing" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=fake-azure-tenant-id-for-testing" >> $GITHUB_ENV
          
      - name: Wait for PostgreSQL
        run: |
          echo "=== Waiting for PostgreSQL to be ready ==="
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "✓ PostgreSQL is ready"
              break
            else
              echo "Waiting for PostgreSQL... attempt $i/30"
              sleep 2
            fi
          done
          
          # Test database connection
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SELECT version();"

      - name: Create root role in Postgres for compatibility
        run: |
          echo "=== Creating optional 'root' PostgreSQL role (ignore errors) ==="
          set +e  # Do not fail if role already exists
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "DO \$\$BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'root') THEN CREATE ROLE root WITH LOGIN PASSWORD 'postgres'; END IF; END\$\$;" || true
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "ALTER ROLE root CREATEDB;" || true
          set -e
 
      - name: Set Python path and test imports
        run: |
          echo "=== Setting up Python path ==="
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          
          echo "=== Testing basic imports ==="
          cd backend
          python -c "
          import sys
          print('Python path:', sys.path)
          try:
              from app.main import app
              print('✓ Successfully imported FastAPI app')
          except Exception as e:
              print('❌ Failed to import app:', e)
              sys.exit(1)
          "
          
      - name: Run tests
        run: |
          echo "=== Running pytest ==="
          cd backend
          
          # Set environment variables for tests
          export DATABASE_URL="$DATABASE_URL"
          export SECRET_KEY="$SECRET_KEY"
          export GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID"
          
          # Run tests with maximum verbosity
          python -m pytest tests/ -v --tb=long --no-header -s --capture=no
          
      - name: Run security audit
        run: |
          echo "=== Running Bandit security scan ==="
          bandit -r backend/app -f text || echo "⚠ Bandit found security issues"
          
      - name: Check for vulnerabilities
        run: |
          echo "=== Running Safety vulnerability check ==="
          safety check --file backend/requirements.txt || echo "⚠ Safety found vulnerabilities"