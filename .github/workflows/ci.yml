name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/postgres
      SECRET_KEY: test-secret-key-for-ci
      GOOGLE_CLIENT_ID: fake-google-client-id-for-testing
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Debug - List files
        run: |
          echo "=== Repository structure ==="
          find . -type f -name "*.py" | head -10
          echo "=== Requirements files ==="
          ls -la *requirements*.txt || echo "No requirements files found"
          echo "=== Backend directory ==="
          ls -la backend/ || echo "No backend directory"
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client libpq-dev
          
      - name: Debug - Python and pip versions
        run: |
          python --version
          pip --version
          which python
          
      - name: Install Python dependencies
        run: |
          echo "=== Installing Python dependencies ==="
          python -m pip install --upgrade pip setuptools wheel
          
          echo "=== Checking requirements files ==="
          if [ -f "backend/requirements.txt" ]; then
            echo "Installing backend/requirements.txt"
            pip install -r backend/requirements.txt
          else
            echo "backend/requirements.txt not found"
            exit 1
          fi
          
          if [ -f "requirements-dev.txt" ]; then
            echo "Installing requirements-dev.txt"
            pip install -r requirements-dev.txt
          else
            echo "requirements-dev.txt not found"
            exit 1
          fi
          
          echo "=== Installed packages ==="
          pip list
          
      - name: Wait for PostgreSQL
        run: |
          echo "=== Waiting for PostgreSQL ==="
          timeout 60s bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do 
            echo "Waiting for postgres..."; 
            sleep 2; 
          done'
          echo "PostgreSQL is ready"
          
      - name: Debug - Test environment
        run: |
          echo "=== Environment variables ==="
          echo "DATABASE_URL: $DATABASE_URL"
          echo "SECRET_KEY: ${SECRET_KEY:0:10}..."
          echo "PYTHONPATH: $PYTHONPATH"
          
          echo "=== Python path and imports ==="
          python -c "import sys; print('Python path:', sys.path)"
          
          echo "=== Test directory structure ==="
          find backend/tests -name "*.py" 2>/dev/null || echo "No test files found"
          
      - name: Run tests with verbose output
        run: |
          echo "=== Running tests ==="
          cd backend
          python -m pytest tests/ -v --tb=long --no-header -s
        continue-on-error: false
          
      - name: Run security scan
        run: |
          echo "=== Running security scan ==="
          bandit -r backend/app -ll || echo "Bandit scan completed with issues"
        continue-on-error: true
          
      - name: Check for vulnerabilities
        run: |
          echo "=== Checking vulnerabilities ==="
          safety check --file backend/requirements.txt --output text || echo "Safety check completed with issues"
        continue-on-error: true